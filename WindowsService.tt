<#@ include file="Shared.tt" #>
<#
bool embedConsoleUtils = true;
if(settings.TryGetValue("EmbedConsoleUtils", out val))
{
    embedConsoleUtils = (bool)val;
}
string interfaceName = settings.TryGetValue("InterfaceName", out val) ? (string)val : "I"+zmqClassName;
bool embedInterface = true;
if(settings.TryGetValue("EmbedInterface", out val))
{
    embedInterface = (bool)val;
}
bool disposeService = true;
if(settings.TryGetValue("DisposeService", out val))
{
    disposeService = (bool)val;
}
#>
using System;
using System.Configuration;
using System.Linq;
using System.Reflection;
<# if(embedConsoleUtils) { #>
using System.Runtime.InteropServices;
<# } #>
using System.ServiceProcess;
using System.Threading;

namespace <#= zmqNamespace #>
{
<# if(embedInterface) { #>
    public interface <#= interfaceName #> : IDisposable
    {
        string Name { get; }
        void Start();
        void Stop();
    }
	
<# } #>
    <#= zmqVisibility #> class <#= zmqClassName #> : ServiceBase
    {
        // Required designer variable.
        // ReSharper disable once FieldCanBeMadeReadOnly.Local
        private System.ComponentModel.IContainer components = null;

        // http://msdn.microsoft.com/en-us/library/system.serviceprocess.serviceinstaller(v=vs.110).aspx

        public static ConsoleColor ConsoleColor = ConsoleColor.Cyan;

        public static void Run(<#= interfaceName #> service)
        {
            var windowsService = new <#= zmqClassName #>(service);
            if (Environment.UserInteractive)
            {
                ConsoleUtils.ConfigureConsole(service.Name);

                windowsService.OnStart(null);

                Console.ForegroundColor = ConsoleColor;
                Console.WriteLine("Press ESC to stop");
                Console.ResetColor();
                ConsoleUtils.WaitForEscape();

                windowsService.Stop();

                Console.ForegroundColor = ConsoleColor;
                Console.WriteLine("Press ESC to exit");
                Console.ResetColor();
                ConsoleUtils.WaitForEscape();
            }
            else
            {
                Run(windowsService);
            }
        }

        private readonly <#= interfaceName #> _service;

        private WindowsService(<#= interfaceName #> service)
        {
            if(service == null) throw new ArgumentNullException(nameof(service));
            ServiceName = service.Name;
            _service = service;
        }

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                if (components != null)
                {
                    components.Dispose();
                }
            }
<# if(disposeService) { #>
            if (_service != null) _service.Dispose();
<# } #>
            base.Dispose(disposing);
        }

        protected override void OnStart(string[] args)
        {
            _service.Start();
        }

        protected override void OnStop()
        {
            _service.Stop();
        }

<# if(embedConsoleUtils) { #>
        private static class ConsoleUtils
        {
			public static void ConfigureConsole(string title)
			{
				if (!string.IsNullOrEmpty(title)) Console.Title = title;

				var windowSize = ConfigurationManager.AppSettings["window-size"];
				if (!string.IsNullOrEmpty(windowSize))
				{
					var vals = windowSize.Split(' ').Select(int.Parse).ToArray();
					if (vals.Length == 2)
					{
						Console.SetWindowSize(vals[0], vals[1]);
						Console.SetBufferSize(vals[0], Math.Min(vals[1], 50));
					}
				}

				var windowPosition = ConfigurationManager.AppSettings["window-position"];
				if (!string.IsNullOrEmpty(windowPosition))
				{
					var vals = windowPosition.Split(' ').Select(int.Parse).ToArray();
					if (vals.Length == 2)
					{
						ConsoleUtils.SetWindowPos(vals[0], vals[1]);
					}
				}
			}

			public static void WaitForEscape()
			{
				ConsoleKey key;
				do
				{
					if (Console.KeyAvailable) key = Console.ReadKey(true).Key;
					else
					{
						key = 0;
						Thread.Sleep(200);
					}
				} while (key != ConsoleKey.Escape);
			}

            private static readonly IntPtr ThisConsole = GetConsoleWindow();

            private static void SetWindowPos(int left, int top)
            {
                SetWindowPos(ThisConsole, 0, left, top, 0, 0, 0x0001);
            }

            [DllImport("kernel32.dll", ExactSpelling = true)]
            private static extern IntPtr GetConsoleWindow();

            [DllImport("user32.dll", EntryPoint = "SetWindowPos")]
            private static extern IntPtr SetWindowPos(IntPtr hWnd, int hWndInsertAfter, int x, int y, int cx, int cy, int wFlags);
        }
<# } #>
    }
}
