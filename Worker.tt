<#@ include file="Shared.tt" #>
using System.Threading;

namespace <#= zmqNamespace #>
{
    public abstract class Worker : IService
    {
        public static int DelayBeforeAbort = 5000;

        private static readonly ManualResetEvent TerminateEvent = new ManualResetEvent(false);
        private Thread _newThread;
        protected readonly ILogger Logger;

        public string Name { get { return GetType().Name; } }

        protected Worker(ILogManager logManager)
        {
            Logger = logManager.GetLogger(Name);
        }

        protected abstract void WorkTick();

        public virtual void Start()
        {
            if (_newThread != null) return;

            _newThread = new Thread(WorkLoop);
            _newThread.Name = Name;
            BeforeThreadStart(_newThread);
            _newThread.Start();
        }

        protected virtual void BeforeThreadStart(Thread thread)
        {
        }

        public virtual void Stop()
        {
            if (_newThread == null) return;

            TerminateEvent.Set();

            if (_newThread.IsAlive)
            {
                if (!_newThread.Join(DelayBeforeAbort))
                {
                    Abort();
                    _newThread.Join();
                }
            }
            _newThread = null;
        }

        protected virtual void Abort()
        {
            Logger.Warn("Aborting {0}", Name);
            _newThread.Abort();
        }

        public virtual void Dispose()
        {
            Logger.Info("Disposing {0}", Name);
            if (_newThread != null) Stop();
        }

        protected static bool ShouldExit()
        {
            return TerminateEvent.WaitOne(0);
        }

        protected virtual void WorkLoop()
        {
            while (!ShouldExit())
            {
                WorkTick();
            }
        }
    }
}